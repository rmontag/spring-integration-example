<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>rmontag</groupId>
    <artifactId>spring-integration-example</artifactId>
    <version>0.1.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.1.RELEASE</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
		<!-- 
			Spring Boot Starters are a set of convenient dependency descriptors that you can include in your application. 
			You get a one-stop-shop for all the Spring and related technology that you need without having to hunt through sample code 
			and copy paste loads of dependency descriptors. 
			
			For example, if you want to get started using Spring and JPA for database access just include the spring-boot-starter-data-jpa dependency 
			in your project, and you are good to go.
	 	-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-integration</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.integration</groupId>
            <artifactId>spring-integration-feed</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.integration</groupId>
            <artifactId>spring-integration-file</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <plugins>
        	<!-- 
        	The Spring Boot Maven plugin provides many convenient features:
        		- It collects all the jars on the classpath and builds a single, runnable "über-jar", 
        		  which makes it more convenient to execute and transport your service.
        		- It searches for the public static void main() method to flag as a runnable class.
        		- It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. 
        		  You can override any version you wish, but it will default to Boot’s chosen set of versions.
        	 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-releases</id>
            <name>Spring Releases</name>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>

</project>
